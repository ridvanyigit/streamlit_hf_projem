# app.py

import streamlit as st
import pickle
import string
# import nltk
# from nltk.corpus import stopwords
# from nltk.stem import PorterStemmer
import numpy as np # test_model_classes iÃ§inde kullanÄ±ldÄ±ysa import edilmeli

# --- ZIMANÃŠ RÃ›PELA Sazkirin (DivÃª Fermana Streamlit a YEKEM be) ---
st.set_page_config(page_title="DabeÅŸkerÃª SpamÃª", page_icon="ğŸ“§") # RÃ»pel Sernav: Spam Classifier -> DabeÅŸkerÃª SpamÃª

# --- Barkirina ModelÃª ---
MODEL_PATH = 'spam_classifier.pkl'

@st.cache_resource
def load_model(path):
    """Modela pickle ji rÃªÃ§a diyarkirÃ® bar dike."""
    try:
        with open(path, 'rb') as file:
            model = pickle.load(file)
        return model
    except FileNotFoundError:
        st.error(f"Ã‡ewtÃ®: PelÃª modelÃª '{path}' nehat dÃ®tin. Ji kerema xwe piÅŸtrast bikin ku pel di depoyÃª de ye Ã» nav rast hatiye nivÃ®sandin.")
        return None
    except ModuleNotFoundError as e:
        st.error(f"Ã‡ewtÃ®: PirtÃ»kxaneya pÃªwÃ®st ji bo barkirina modelÃª nehat dÃ®tin: {e}. PelÃª 'requirements.txt' kontrol bikin (mÃ®nak: scikit-learn).")
        return None
    except Exception as e:
        st.error(f"Di dema barkirina modelÃª de Ã§ewtiyek nediyar Ã§ÃªbÃ»: {e}")
        return None

# ModelÃª bar bike
model = load_model(MODEL_PATH)

# --- NavrÃ»ya BikarhÃªner a Streamlit ---

st.title("ğŸ“§ DabeÅŸkerÃª PeyamÃªn Spam") # Sernav: Spam Mesaj SÄ±nÄ±flandÄ±rÄ±cÄ± -> DabeÅŸkerÃª PeyamÃªn Spam
st.write("Ji bo dabeÅŸkirina ka peyama we spam e an na, qada nivÃ®sÃª ya jÃªrÃ®n bikar bÃ®nin.") # AÃ§Ä±klama metni

# --- Kontrola Barkirina ModelÃª ---
if model is None:
    st.warning("Ji ber ku model nehat barkirin, sepan niha nayÃª bikaranÃ®n. Ji kerema xwe paÅŸÃª dÃ®sa biceribÃ®nin an bi rÃªveberÃª re tÃªkilÃ® daynin.")
    st.stop()

# --- TÃªketina BikarhÃªner ---
message_input = st.text_area(
    "Peyama xwe li vir binivÃ®sin:", # Metin alanÄ± etiketi
    height=150,
    placeholder="MÃ®nak: Click this link to win a prize!" # Placeholder metni (Ä°ngilizce bÄ±rakmak daha iyi olabilir, model Ä°ngilizce bekliyor)
)

# --- BiÅŸkoja DabeÅŸkirinÃª Ã» Mantiq ---
classify_button = st.button("PeyamÃª DabeÅŸ Bike") # Buton metni: MesajÄ± SÄ±nÄ±flandÄ±r -> PeyamÃª DabeÅŸ Bike

if classify_button:
    if message_input and message_input.strip():
        try:
            # Model navnÃ®ÅŸanek an rÃªzek hÃªvÃ® dike, peyamek yekane tÃªxe navnÃ®ÅŸanÃª
            prediction = model.predict([message_input])
            result = prediction[0]

            st.subheader("Encam:") # Alt baÅŸlÄ±k: SonuÃ§ -> Encam
            if result == 'spam':
                st.error(f"ğŸš¨ Ev peyam wekÃ® **SPAM** hate dabeÅŸ kirin.") # Spam sonucu
            else:
                st.success(f"âœ… Ev peyam wekÃ® **HAM** (Ne Spam) hate dabeÅŸ kirin.") # Ham sonucu

        except Exception as e:
            st.error(f"Di dema dabeÅŸkirinÃª de Ã§ewtiyek Ã§ÃªbÃ»: {e}") # SÄ±nÄ±flandÄ±rma hatasÄ±
    else:
        st.warning("Ji kerema xwe ji bo dabeÅŸkirinÃª peyamek binivÃ®sin.") # BoÅŸ mesaj uyarÄ±sÄ±


# --- Sidebar (MilÃª Ã‡epÃª) ---
st.sidebar.header("DerbarÃª SepanÃª") # Sidebar baÅŸlÄ±ÄŸÄ±: Uygulama HakkÄ±nda -> DerbarÃª SepanÃª
st.sidebar.info(
    "Ev sepan, bi karanÃ®na modelek fÃªrbÃ»na makÃ®neyÃª (TF-IDF + Random Forest) ya ku bi Scikit-learn hatiye perwerde kirin, "
    "peyamÃªn nivÃ®sÃª wekÃ® 'Spam' an 'Ham' dabeÅŸ dike."
) # Sidebar bilgi metni
st.sidebar.markdown("---")
st.sidebar.markdown("Kod li ser [GitHub](https://github.com/ridvanyigit/streamlit_hf_projem)Ãª heye.") # Sidebar link metni